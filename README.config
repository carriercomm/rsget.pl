# Example config file
# $Id$
#
# Copy it to $HOME/.rsget.pl/config and make necessary adjustments.

# backups may be disabled or enabled for 3 different cases:
#  done - make backup of file in donedir
#  continue - make backup of file in workdir if continuing partial download
#  scratch - make backup of file in workdir if downloading it from scratch
#  no - backups are never made
# make backups always:
backup = done,continue,scratch
# make backups of completed downloads only:
#backup = done
# never make backups:
#backup = no

# for file FILE_NAME.EXT by default backups will be named as:
# FILE_NAME-{N}.EXT where {N} is 1, 2, 3...
# to name backups as FILE_NAME.EXT~{N} use:
backup_suf = ~

# Start web interface by setting http_port to a non-zero value.
# I suggest using port 7666 as it is used in all other examples.
# NOTE: rsget.pl has very weak authentication so make sure firewall only
# allows trusted hosts to connect to this port.
http_port = 7666

# require authentication for http:
#  user: root
#  password: qwerty
http_pass = qwerty

# Some services have no parallel-downloads limitation, set max slots
# for such services. If you've got fast connection and only one
# ip address / interface, increase this number to a large value.
# Number of maximum connections is the number of max_slots multiplied
# by number of ip addresses / interfaces.
max_slots = 8

# number of links to check at once in the same service
max_slots_check = 8

# if you are blessed with multiple interfaces:
#interfaces = eth0, tun0, tun1
# same thing for multiple IP addresses:
#interfaces = 1.1.1.1, 1.1.1.2, 1.1.1.3
# use http and socks5 proxies as additional interfaces:
#interfaces = eth0, socks5=localhost:9999, http=someproxy.com:8080

# if your vim stores swap files in different directory and you want list
# file locking:
#list_lock = ${HOME}/.vim/.$(file).swp
# list will be manipulated by some external app which creates .lock file
# in the same directory as list file:
#list_lock = $(dir)/.lock

# store unfinished files in "partial" directory
workdir = partial

# move finished downloads to "done"
outdir = done

# Execute shell command after finishing file download.
# Will not block, stdin and stdout are ignored.
# Recognized special variables:
#  $(name) - name of the file
#  $(file) - path to the file (including outdir), use $PWD/$(file) if you
#            need full path and your outdir is relative
#  $(source) - source uri
#  $(size) - file size in bytes
# All those variables are automatically quoted, so you _must__not_ quote them.
# Examples:
# * send nice dbus org.freedesktop.notifications message (some notification
#   deamons may not support those html tags):
#postdownload = notify-send "rsget.pl: "$(name) "Finished downloading <a href='$PWD/"$(file)"'>"$(name)"</a> (size: <b>"$(size)"B</b>) from <tt>"$(source)"</tt>"
#
# * copy your file somewhere else:
#postdownload = scp $(file) remote_machine:my_downloads
#
# * unpack and delete if successful
#   <http://github.com/sparky/home/blob/master/bin/spill>:
#postdownload = spill -c $(file)
#
# * execute your own script which does anything you want:
#postdownload = ${HOME}/bin/postdownload $(file) $(source) || notify-send "rsget.pl: "$(name) "postdownload failed"

# update automatically from SVN (possibly dangerous, but very convenient):
#use_svn = update

# save erroneous pages (only useful for getter debugging):
#debug = 1

# be verbose (useful for debugging):
#verbose = 2

# save captcha images (useful for debugging) in ~/.rsget.pl/captcha directory:
#captcha_save_results = ${RSGET_DIR}/captcha
